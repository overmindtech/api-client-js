"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Overmind API
 * API for managing your Overmind account
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class CoreApi extends runtime.BaseAPI {
    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    createSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.adminCreateSourceRequest === null || requestParameters.adminCreateSourceRequest === undefined) {
                throw new runtime.RequiredError('adminCreateSourceRequest', 'Required parameter requestParameters.adminCreateSourceRequest was null or undefined when calling createSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            const response = yield this.request({
                path: `/core/sources`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AdminCreateSourceRequestToJSON)(requestParameters.adminCreateSourceRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SourceFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    createSource(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSourceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    createTokenRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenRequestData === null || requestParameters.tokenRequestData === undefined) {
                throw new runtime.RequiredError('tokenRequestData', 'Required parameter requestParameters.tokenRequestData was null or undefined when calling createToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["request:receive", "request:send", "reverselink:ingest", "reverselink:request", "reverselink:respond", "gateway:stream"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["request:receive", "request:send", "reverselink:ingest", "reverselink:request", "reverselink:respond", "gateway:stream"]);
            }
            const response = yield this.request({
                path: `/core/tokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.TokenRequestDataToJSON)(requestParameters.tokenRequestData),
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    createToken(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTokenRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    deleteSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
                throw new runtime.RequiredError('sourceId', 'Required parameter requestParameters.sourceId was null or undefined when calling deleteSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            const response = yield this.request({
                path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    deleteSource(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSourceRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    getAccountRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["account:read"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["account:read"]);
            }
            const response = yield this.request({
                path: `/core/account`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountFromJSON)(jsonValue));
        });
    }
    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    getAccount(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the details of a source
     * Sources - Get details
     */
    getSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
                throw new runtime.RequiredError('sourceId', 'Required parameter requestParameters.sourceId was null or undefined when calling getSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:read"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:read"]);
            }
            const response = yield this.request({
                path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SourceFromJSON)(jsonValue));
        });
    }
    /**
     * Get the details of a source
     * Sources - Get details
     */
    getSource(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSourceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    listSourcesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:read"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:read"]);
            }
            const response = yield this.request({
                path: `/core/sources`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.SourceFromJSON));
        });
    }
    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    listSources(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSourcesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates the details of a source
     * Sources - Update
     */
    updateSourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
                throw new runtime.RequiredError('sourceId', 'Required parameter requestParameters.sourceId was null or undefined when calling updateSource.');
            }
            if (requestParameters.adminCreateSourceRequest === null || requestParameters.adminCreateSourceRequest === undefined) {
                throw new runtime.RequiredError('adminCreateSourceRequest', 'Required parameter requestParameters.adminCreateSourceRequest was null or undefined when calling updateSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("OAuth2", ["source:write"]);
            }
            const response = yield this.request({
                path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AdminCreateSourceRequestToJSON)(requestParameters.adminCreateSourceRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Updates the details of a source
     * Sources - Update
     */
    updateSource(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateSourceRaw(requestParameters, initOverrides);
        });
    }
}
exports.CoreApi = CoreApi;
