/**
 * Overmind API
 * API for managing your Overmind account
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Account, AdminCreateSourceRequest, Source, TokenRequestData } from '../models';
export interface CreateSourceRequest {
    adminCreateSourceRequest: AdminCreateSourceRequest;
}
export interface CreateTokenRequest {
    tokenRequestData: TokenRequestData;
}
export interface DeleteSourceRequest {
    sourceId: string;
}
export interface GetSourceRequest {
    sourceId: string;
}
export interface UpdateSourceRequest {
    sourceId: string;
    adminCreateSourceRequest: AdminCreateSourceRequest;
}
/**
 *
 */
export declare class CoreApi extends runtime.BaseAPI {
    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    createSourceRaw(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>>;
    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    createSource(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source>;
    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    createTokenRaw(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    createToken(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    deleteSourceRaw(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    deleteSource(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;
    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;
    /**
     * Get the details of a source
     * Sources - Get details
     */
    getSourceRaw(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>>;
    /**
     * Get the details of a source
     * Sources - Get details
     */
    getSource(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source>;
    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    listSourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Source>>>;
    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    listSources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Source>>;
    /**
     * Updates the details of a source
     * Sources - Update
     */
    updateSourceRaw(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Updates the details of a source
     * Sources - Update
     */
    updateSource(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
