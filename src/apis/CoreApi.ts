/* tslint:disable */
/* eslint-disable */
/**
 * Overmind API
 * API for managing your Overmind account
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  AdminCreateSourceRequest,
  Source,
  TokenRequestData,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    AdminCreateSourceRequestFromJSON,
    AdminCreateSourceRequestToJSON,
    SourceFromJSON,
    SourceToJSON,
    TokenRequestDataFromJSON,
    TokenRequestDataToJSON,
} from '../models';

export interface CreateSourceRequest {
    adminCreateSourceRequest: AdminCreateSourceRequest;
}

export interface CreateTokenRequest {
    tokenRequestData: TokenRequestData;
}

export interface DeleteSourceRequest {
    sourceId: string;
}

export interface GetSourceRequest {
    sourceId: string;
}

export interface UpdateSourceRequest {
    sourceId: string;
    adminCreateSourceRequest: AdminCreateSourceRequest;
}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    async createSourceRaw(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters.adminCreateSourceRequest === null || requestParameters.adminCreateSourceRequest === undefined) {
            throw new runtime.RequiredError('adminCreateSourceRequest','Required parameter requestParameters.adminCreateSourceRequest was null or undefined when calling createSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        const response = await this.request({
            path: `/core/sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminCreateSourceRequestToJSON(requestParameters.adminCreateSourceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Creates a new source within the user\'s account
     * Sources - Create
     */
    async createSource(requestParameters: CreateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.createSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    async createTokenRaw(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.tokenRequestData === null || requestParameters.tokenRequestData === undefined) {
            throw new runtime.RequiredError('tokenRequestData','Required parameter requestParameters.tokenRequestData was null or undefined when calling createToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["request:receive", "request:send", "reverselink:ingest", "reverselink:request", "reverselink:respond", "gateway:stream"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["request:receive", "request:send", "reverselink:ingest", "reverselink:request", "reverselink:respond", "gateway:stream"]);
        }

        const response = await this.request({
            path: `/core/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestDataToJSON(requestParameters.tokenRequestData),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new NATS token for a given public NKey. The user requesting must control the associated private key also in order to connect to NATS as the token is not enough on its own
     * Generate a NATS token
     */
    async createToken(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    async deleteSourceRaw(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
            throw new runtime.RequiredError('sourceId','Required parameter requestParameters.sourceId was null or undefined when calling deleteSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        const response = await this.request({
            path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a source from a user\'s account
     * Sources - Delete
     */
    async deleteSource(requestParameters: DeleteSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSourceRaw(requestParameters, initOverrides);
    }

    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    async getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["account:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["account:read"]);
        }

        const response = await this.request({
            path: `/core/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get the details of the account that this user belongs to
     * Account - Get details
     */
    async getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the details of a source
     * Sources - Get details
     */
    async getSourceRaw(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
            throw new runtime.RequiredError('sourceId','Required parameter requestParameters.sourceId was null or undefined when calling getSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:read"]);
        }

        const response = await this.request({
            path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Get the details of a source
     * Sources - Get details
     */
    async getSource(requestParameters: GetSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.getSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates sources to keep them running in the background. This can be used to add explicit action, when the built-in keepalives are not sufficient.
     * Sources - Keepalive
     */
    async keepaliveSourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        const response = await this.request({
            path: `/core/sources/keepalive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates sources to keep them running in the background. This can be used to add explicit action, when the built-in keepalives are not sufficient.
     * Sources - Keepalive
     */
    async keepaliveSources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.keepaliveSourcesRaw(initOverrides);
    }

    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    async listSourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Source>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:read"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:read"]);
        }

        const response = await this.request({
            path: `/core/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SourceFromJSON));
    }

    /**
     * Lists all sources within the user\'s account
     * Sources - List
     */
    async listSources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Source>> {
        const response = await this.listSourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of a source
     * Sources - Update
     */
    async updateSourceRaw(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sourceId === null || requestParameters.sourceId === undefined) {
            throw new runtime.RequiredError('sourceId','Required parameter requestParameters.sourceId was null or undefined when calling updateSource.');
        }

        if (requestParameters.adminCreateSourceRequest === null || requestParameters.adminCreateSourceRequest === undefined) {
            throw new runtime.RequiredError('adminCreateSourceRequest','Required parameter requestParameters.adminCreateSourceRequest was null or undefined when calling updateSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["source:write"]);
        }

        const response = await this.request({
            path: `/core/sources/{source_id}`.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters.sourceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminCreateSourceRequestToJSON(requestParameters.adminCreateSourceRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the details of a source
     * Sources - Update
     */
    async updateSource(requestParameters: UpdateSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSourceRaw(requestParameters, initOverrides);
    }

}
