/* tslint:disable */
/* eslint-disable */
/**
 * Overmind API
 * API for managing your Overmind account
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details to update for a source
 * @export
 * @interface AdminCreateSourceRequest
 */
export interface AdminCreateSourceRequest {
    /**
     * The descriptive name of the source
     * @type {string}
     * @memberof AdminCreateSourceRequest
     */
    descriptiveName: string;
    /**
     * What source to configure. Currently either "stdlib" or "aws"
     * @type {string}
     * @memberof AdminCreateSourceRequest
     */
    type: string;
    /**
     * Config for this source. See the source documentation for what source-specific config is available/required. This will be supplied directly to viper via a config file at `/etc/srcman/config/source.yaml`
     * @type {object}
     * @memberof AdminCreateSourceRequest
     */
    config?: object;
    /**
     * Additional config options that should be passed to the source. The keys of this object should be file names, and the values should be their content. These files will be made available to the source at runtime. Check the source's documentation for what to configure here if required
     * @type {{ [key: string]: string; }}
     * @memberof AdminCreateSourceRequest
     */
    additionalConfig?: { [key: string]: string; };
}

/**
 * Check if a given object implements the AdminCreateSourceRequest interface.
 */
export function instanceOfAdminCreateSourceRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "descriptiveName" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function AdminCreateSourceRequestFromJSON(json: any): AdminCreateSourceRequest {
    return AdminCreateSourceRequestFromJSONTyped(json, false);
}

export function AdminCreateSourceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminCreateSourceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'descriptiveName': json['descriptive_name'],
        'type': json['type'],
        'config': !exists(json, 'config') ? undefined : json['config'],
        'additionalConfig': !exists(json, 'additional_config') ? undefined : json['additional_config'],
    };
}

export function AdminCreateSourceRequestToJSON(value?: AdminCreateSourceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'descriptive_name': value.descriptiveName,
        'type': value.type,
        'config': value.config,
        'additional_config': value.additionalConfig,
    };
}

