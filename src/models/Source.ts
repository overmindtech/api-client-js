/* tslint:disable */
/* eslint-disable */
/**
 * Overmind API
 * API for managing your Overmind account
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A source that is capable of discovering items
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * The descriptive name of the source
     * @type {string}
     * @memberof Source
     */
    descriptiveName?: string;
    /**
     * Unique ID of the source
     * @type {string}
     * @memberof Source
     */
    sourceId?: string;
    /**
     * OAuth ID token that the source should use
     * @type {string}
     * @memberof Source
     */
    idToken?: string;
    /**
     * OAuth token that allows the source to respond to requests
     * @type {string}
     * @memberof Source
     */
    accessToken?: string;
    /**
     * OAuth refresh token that can be exchanged for a new access_token
     * @type {string}
     * @memberof Source
     */
    refreshToken?: string;
    /**
     * How many replicas of the source to run??? Do we need this?
     * @type {number}
     * @memberof Source
     */
    replicas?: number;
    /**
     * Docker image of the source
     * @type {string}
     * @memberof Source
     */
    image?: string;
    /**
     * Config for this source. See the source documentation for what config is available/required
     * @type {{ [key: string]: string; }}
     * @memberof Source
     */
    config?: { [key: string]: string; };
}

/**
 * Check if a given object implements the Source interface.
 */
export function instanceOfSource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SourceFromJSON(json: any): Source {
    return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Source {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'descriptiveName': !exists(json, 'descriptive_name') ? undefined : json['descriptive_name'],
        'sourceId': !exists(json, 'source_id') ? undefined : json['source_id'],
        'idToken': !exists(json, 'id_token') ? undefined : json['id_token'],
        'accessToken': !exists(json, 'access_token') ? undefined : json['access_token'],
        'refreshToken': !exists(json, 'refresh_token') ? undefined : json['refresh_token'],
        'replicas': !exists(json, 'replicas') ? undefined : json['replicas'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'config': !exists(json, 'config') ? undefined : json['config'],
    };
}

export function SourceToJSON(value?: Source | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'descriptive_name': value.descriptiveName,
        'source_id': value.sourceId,
        'id_token': value.idToken,
        'access_token': value.accessToken,
        'refresh_token': value.refreshToken,
        'replicas': value.replicas,
        'image': value.image,
        'config': value.config,
    };
}

